

  //数据流
  //   就C程序而言，从程序中移进，移出字节，这种字节叫做“字节流”;程序与数据的交互是以“流”的形式进行的;
  //   进行文件读写时，会先“打开文件”操作，就是打开数据流，而“关闭文件”就是关闭数据流.;




  //缓冲区
  //在程序执行是，所提供的额外的内存，用来暂时存放准备执行的数据;
  //提高存取效率，内存的存取速度比磁盘驱动器快得多;
  //事实上，读取文件时，是先打开数据流，将文件读取到缓冲区，然后程序从缓冲区中读取数据;
  //事实上，写入文件时，并不会直接谢入磁盘，而是先写入缓冲区，只有在缓冲区已满或是“关闭文件”时，才会写入磁盘;


  //文件类型
  //  文本文件  二进制文件;
  //文本文件以字符编码方式进行保存;二进制文件将内存中的数据原封不动的进行保存，适用于非字符为空的数据;
  //事实上，所有数据都可以看作是二进制文件，二进制文件的优点是读取速度快，占用空间小;



  //文件读取方式
  //   顺序读取   随机读取;
  //顺序读取就是从上往下读取，写入数据时，将数据附加在文件的末尾;
  //随机读取多以二进制文件为主，会以一个完整的单位进行读取和写入，通常以结构为单位;


  //文件
  //文件是一段数据的集合，可以是有规则的，也可以是无序的，  











/*#include<stdio.h>
#include<windows.h>                                                               
int main(){
    FILE* ch;
    ch = fopen("C:\\Users\\Ys Wang\\Desktop\\666.txt", "w");                  //文件的打开
    if ( ch == NULL){
        printf("ERROR!");
        return 0;
    }
    else {
        printf("123");
        return 0;    }
}*/                                  //打开文件使用函数fopen();   关闭文件使用函数fclose();
                                     //打开文件需要参数;
                                     //常见的参数形式;
                                        //“r”：     以只读的形式打开文本文件(不存在则出错)
                                        //“w”：     以只写的形式打开文本文件(若不存在则新建，反之，则从文件起始位置写，覆盖原内容)
                                        //“a”：     以追加的形式打开文本文件(若不存在，则新建；反之，在原文件后追加)
                                        //“r+”：    以读写的形式打开文本文件(读时，从头开始；写时，新数据只覆盖所占的空间)
                                        //“wb”：    以只写的形式打开二进制文件
                                        //“rb”：    以只读的形式打开二进制文件
                                        //“ab”：    以追加的形式打开一个二进制文件
                                        //“rb+”:    以读写的形式打开二进制文件。
                                        //“w+”：    首先建立一个新文件，进行写操作，然后从头开始读(若文件存在，原内容将全部消失)
                                        //“a+”：    功能与”a”相同。只是在文件尾部追加数据后，可以从头开始读
                                        //“wb+”：   功能与”w+”相同。只是在读写时，可以由位置函数设置读和写的起始位置
                                        //“ab+”：   功能与”a+”相同。只是在文件尾部追加数据之后，可以由位置函数设置开始读的起始位置


    //文件的读写
    //fgetc()：      读取一个字符
    //fputc()：      写入一个字符
    //fgets()：      读取一个字符串
    //fputs()：      写入一个字符串
    //fprintf()：    写入格式化数据
    //fscanf()：     格式化读取数据
    //fread()：      读取数据
    //fwrite()：     写入数据


    // #include<stdio.h>
    // #include<windows.h>
    // int main(){
    //     FILE* ch;
    //     ch = fopen("C:\\Users\\Ys Wang\\Desktop\\test.txt", "r+");
    //     if ( ch == NULL){
    //       printf("找不到文件");
    //     }
    //     else {

    //     }    
    //     return 0;   
    // }


#include<stdio.h>
int main(){
  printf("hello world");
  return 0;
}






